"""
Django settings for todo project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

# Criar diretórios base
BASE_DIR = Path(__file__).resolve().parent.parent

# chave secreta para uma instalação específica do Django.
SECRET_KEY = '$-%)8-sws(^z5nln2n=b*f6zyx8b0jlz%3g=7)esl0e50790mm'

# Um booleano que ativa / desativa o modo de depuração.
DEBUG = True

# Gerar log de ações em arquivos de texto.

    #DEBUG   :Informações de sistema de baixo nível para fins de depuração
    #INFO    : Informações gerais do sistema
    #WARNING : Informações que descrevem um pequeno problema ocorrido.
    #ERROR   : Informações que descrevem um problema importante ocorrido.
    #CRITICAL: Informações que descrevem um problema crítico ocorrido.


# Um logger é o ponto de entrada no sistema de registro. Cada registrador é um intervalo nomeado no qual as mensagens podem ser gravadas para processamento.
LOGGING = {
    'version':1,
    'loggers':{
        'django':{
            'handlers':['file'],
            'level':'DEBUG'
        }
    },

    #O manipulador é o mecanismo que determina o que acontece com cada mensagem em um logger. Ele descreve um comportamento de registro específico, como escrever uma mensagem na tela, em um arquivo ou em um soquete de rede.
    'handlers':{
        'file':{
            'level':'INFO',
            'class': 'logging.FileHandler',
            'filename':'C:/Users/eduar/Área de Trabalho/TCC_FINAL/debug.log',
            'formatter': 'simpleRe',
        }
    },
    #Os formatadores descrevem o formato exato desse texto. Um formatador geralmente consiste em uma string de formatação Python
    'formatters':{
        'simpleRe': {
            'format':'{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        }
    }
}

DEFAULT_AUTO_FIELD='django.db.models.AutoField' 

# lista de strings que representam os nomes de host / domínio que este site Django pode servir.
ALLOWED_HOSTS = ['127.0.0.1', 'localHost',]

# Aplicativos instalados

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tasks',
  
]

# sistema de plugins

#gatilhos que podem ser ativados conforme o fluxo vai sendo executado dentro da aplicação
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Rota padrão para o roteamento de urls
ROOT_URLCONF = 'todo.urls'

# Lista contendo as configurações para todos os motores de template a serem usados ​​com Django
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

#Caminho completo do Python do objeto de aplicação WSGI que os servidores embutidos do Django usarão. Como por exemplo o runserver
WSGI_APPLICATION = 'todo.wsgi.application'


#WSGI (significa Web Server Gateway Interface) é simples, onde você pode 
# definir seu aplicativo como um objeto que leva dois argumentos o primeiro argumento 
# Environment descreve a solicitação e o ambiente em que o servidor está sendo executado e o segundo argumento é um objeto
# síncrono que você chama comece a resposta para ceder o corpo.

# ASGI Asynchronous Server Gateway Interface, fica como se fosse atualizando os dados o tempo todo, gerando trafego na rede.


#Definição dos bancos de dados utilizado na aplicação.

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

#Validação das senhas

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


#Definição de linguagens e fusos horários.

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Arquivos estáticos (CSS, JavaScript, Images)

STATIC_URL = '/static/'


MEDIA_URL = "/media/"
MEDIA_ROOT = "{}/media".format(BASE_DIR)

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

LOGIN_REDIRECT_URL = '/feed.html'

LOGOUT_REDIRECT_URL = '/accounts/login'